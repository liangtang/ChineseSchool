//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChineseSchool.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ChineseSchoolEntities : DbContext
    {
        public ChineseSchoolEntities()
            : base("name=ChineseSchoolEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<ClassRegistration> ClassRegistrations { get; set; }
        public virtual DbSet<ClassTeacherAssignment> ClassTeacherAssignments { get; set; }
        public virtual DbSet<EnrichmentClass> EnrichmentClasses { get; set; }
        public virtual DbSet<EnrichmentClassRegistration> EnrichmentClassRegistrations { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<Image> Images { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<Parent> Parents { get; set; }
        public virtual DbSet<Semester> Semesters { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<v_StudentClass> v_StudentClass { get; set; }
        public virtual DbSet<v_StudentClassDetails> v_StudentClassDetails { get; set; }
        public virtual DbSet<v_StudentEnrichmentClass> v_StudentEnrichmentClass { get; set; }
        public virtual DbSet<v_TeacherClass> v_TeacherClass { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<PositionType> PositionTypes { get; set; }
        public virtual DbSet<Stuff> Stuffs { get; set; }
        public virtual DbSet<EnrichmentClassTeacherAssignment> EnrichmentClassTeacherAssignments { get; set; }
        public virtual DbSet<v_TeacherAssignment> v_TeacherAssignment { get; set; }
        public virtual DbSet<Video> Videos { get; set; }
        public virtual DbSet<v_CurrentRegistrationDetails> v_CurrentRegistrationDetails { get; set; }
    
        public virtual int RegisterStudent(Nullable<int> studentId, Nullable<bool> ifRegister, Nullable<int> classId, Nullable<int> enrichmentClassId, string userID, Nullable<System.DateTime> registrationDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var ifRegisterParameter = ifRegister.HasValue ?
                new ObjectParameter("IfRegister", ifRegister) :
                new ObjectParameter("IfRegister", typeof(bool));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            var enrichmentClassIdParameter = enrichmentClassId.HasValue ?
                new ObjectParameter("EnrichmentClassId", enrichmentClassId) :
                new ObjectParameter("EnrichmentClassId", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var registrationDateParameter = registrationDate.HasValue ?
                new ObjectParameter("RegistrationDate", registrationDate) :
                new ObjectParameter("RegistrationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterStudent", studentIdParameter, ifRegisterParameter, classIdParameter, enrichmentClassIdParameter, userIDParameter, registrationDateParameter);
        }
    
        public virtual int sp_updateinvoice(Nullable<int> parentId)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updateinvoice", parentIdParameter);
        }
    
        public virtual int sp_deleteparent(Nullable<int> parentId)
        {
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("parentId", parentId) :
                new ObjectParameter("parentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteparent", parentIdParameter);
        }
    
        public virtual int usp_DeleteEvent(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteEvent", eventIdParameter);
        }
    
        public virtual int sp_AddEnrichment(Nullable<int> studentId, Nullable<int> enrichmentClassId, string userId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var enrichmentClassIdParameter = enrichmentClassId.HasValue ?
                new ObjectParameter("EnrichmentClassId", enrichmentClassId) :
                new ObjectParameter("EnrichmentClassId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddEnrichment", studentIdParameter, enrichmentClassIdParameter, userIdParameter);
        }
    
        public virtual int sp_RemoveEnrichment(Nullable<int> studentId, string userId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RemoveEnrichment", studentIdParameter, userIdParameter);
        }
    }
}
